import { NextRequest, NextResponse } from 'next/server';
import { bookingStorage } from '@/utils/storage';
import { sendBookingEmail } from '@/utils/email';
import { sendAdminNotification } from '@/utils/admin-email';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { type, data } = body;

    console.log('üîî MercadoPago webhook received:', { type, data });

    if (type === 'payment') {
      const paymentId = data?.id;
      
      if (!paymentId) {
        console.warn('Payment webhook without payment ID');
        return NextResponse.json({ message: 'Payment ID missing' }, { status: 200 });
      }

      console.log('üí≥ Payment webhook for payment ID:', paymentId);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ webhook
      const external_reference = data?.external_reference;
      console.log('üîó External reference (orderId):', external_reference);
      
      // –ò—â–µ–º booking –ø–æ external_reference (–Ω–∞—à orderId)
      let booking = null;
      if (external_reference) {
        booking = await bookingStorage.getBookingByExternalReference(external_reference);
      }
      
      if (!booking) {
        console.warn('‚ö†Ô∏è  Booking –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è external_reference:', external_reference);
        return NextResponse.json({ message: 'Booking not found' }, { status: 200 });
      }

      console.log('‚úÖ Booking –Ω–∞–π–¥–µ–Ω:', booking.orderId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º EMAIL –ö–õ–ò–ï–ù–¢–£ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
      try {
        await sendBookingEmail(booking.email, booking.name, booking.service, booking.orderId);
        console.log('üìß Email –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
      } catch (emailError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∫–ª–∏–µ–Ω—Ç—É:', emailError);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–¢–û–†–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–µ  
      try {
        const serviceNames: Record<string, string> = {
          'manicure-gel': 'MANICURE + NIVELAMENTO + ESMALTA√á√ÉO EM GEL',
          'alongamento-gel': 'ALONGAMENTO + MANICURE + ESMALTA√á√ÉO EM GEL',
          'combo-completo': 'COMBO: MANICURE + ESMALTA√á√ÉO EM GEL + PEDICURE + PL√ÅSTICA DOS P√âS'
        };
        const servicePrices: Record<string, string> = {
          'manicure-gel': 'R$ 80', 
          'alongamento-gel': 'R$ 119',
          'combo-completo': 'R$ 160'
        };

        await sendAdminNotification({
          orderId: booking.orderId,
          customerName: booking.name,
          customerEmail: booking.email,
          customerPhone: booking.phone,
          service: serviceNames[booking.service] || booking.service,
          price: servicePrices[booking.service] || 'N/A',
          paymentId: paymentId,
          timestamp: new Date().toISOString(),
          status: 'COMPRA_CONFIRMADA'
        });
        
        console.log('üìß Segunda notifica√ß√£o admin enviada - COMPRA CONFIRMADA');
        
      } catch (adminEmailError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–π notifica√ß√£o admin:', adminEmailError);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å booking
      await bookingStorage.updateBooking(booking.orderId, {
        paymentStatus: 'approved',
        mercadoPagoData: { paymentId, processedAt: new Date().toISOString() }
      });
    }

    return NextResponse.json({ message: 'Webhook processed successfully' }, { status: 200 });

  } catch (error) {
    console.error('‚ùå MercadoPago webhook error:', error);
    return NextResponse.json(
      { error: 'Webhook processing failed' },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'MercadoPago webhook endpoint',
    status: 'active',
    timestamp: new Date().toISOString()
  });
}
