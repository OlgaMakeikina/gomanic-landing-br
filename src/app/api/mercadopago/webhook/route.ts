import { NextRequest, NextResponse } from 'next/server';
import { bookingStorage } from '@/utils/storage';
import { sendBookingEmail } from '@/utils/email';
import { sendAdminNotification } from '@/utils/admin-email';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { type, data } = body;

    console.log('üîî MercadoPago webhook –ü–û–õ–ù–´–ï –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(body, null, 2));

    if (type === 'payment') {
      const paymentId = data?.id;
      
      if (!paymentId) {
        console.warn('‚ö†Ô∏è  Payment webhook without payment ID');
        return NextResponse.json({ message: 'Payment ID missing' }, { status: 200 });
      }

      console.log('üí≥ Payment webhook for payment ID:', paymentId);
      
      // –ü–û–õ–£–ß–ê–ï–ú –î–ê–ù–ù–´–ï –ü–õ–ê–¢–ï–ñ–ê –ß–ï–†–ï–ó API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è external_reference
      try {
        console.log('üì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ MercadoPago API...');
        
        const paymentResponse = await fetch(`https://api.mercadopago.com/v1/payments/${paymentId}`, {
          headers: {
            'Authorization': `Bearer ${process.env.MERCADOPAGO_ACCESS_TOKEN}`,
            'Content-Type': 'application/json'
          }
        });

        if (!paymentResponse.ok) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:', paymentResponse.status);
          return NextResponse.json({ message: 'Payment API error' }, { status: 200 });
        }

        const paymentData = await paymentResponse.json();
        console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ API:', JSON.stringify(paymentData, null, 2));

        const external_reference = paymentData.external_reference;
        const payment_status = paymentData.status;
        
        console.log('üîó External reference –∏–∑ API:', external_reference);
        console.log('üí∞ Payment status:', payment_status);

        if (!external_reference) {
          console.warn('‚ö†Ô∏è  external_reference –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞');
          return NextResponse.json({ message: 'External reference missing' }, { status: 200 });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–∞
        if (payment_status === 'approved') {
          console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ APPROVED, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π email –∫–ª–∏–µ–Ω—Ç—É –∏ –∞–¥–º–∏–Ω—É
        } else if (payment_status === 'rejected') {
          console.log('‚ùå –ü–ª–∞—Ç–µ–∂ REJECTED, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å');
          await bookingStorage.updateBooking(external_reference, {
            paymentStatus: 'rejected',
            mercadoPagoData: { paymentId, status: payment_status, processedAt: new Date().toISOString() }
          });
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
          try {
            await sendAdminNotification({
              orderId: external_reference,
              customerName: booking?.name || 'N/A',
              customerEmail: booking?.email || 'N/A', 
              customerPhone: booking?.phone || 'N/A',
              service: booking?.service || 'Unknown',
              price: 'N/A',
              paymentId: paymentId,
              timestamp: new Date().toISOString(),
              status: 'PAGAMENTO_REJEITADO'
            });
            console.log('üìß Notifica√ß√£o admin enviada - PAGAMENTO REJEITADO');
          } catch (error) {
            console.error('‚ùå Erro ao enviar notifica√ß√£o de rejei√ß√£o:', error);
          }
          
          return NextResponse.json({ message: 'Payment rejected processed' }, { status: 200 });
        } else if (payment_status === 'cancelled') {
          console.log('üö´ –ü–ª–∞—Ç–µ–∂ CANCELLED, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å');
          await bookingStorage.updateBooking(external_reference, {
            paymentStatus: 'cancelled',
            mercadoPagoData: { paymentId, status: payment_status, processedAt: new Date().toISOString() }
          });
          return NextResponse.json({ message: 'Payment cancelled processed' }, { status: 200 });
        } else {
          console.log(`‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ: ${payment_status}, –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º`);
          return NextResponse.json({ message: `Payment status ${payment_status} noted` }, { status: 200 });
        }

      } catch (apiError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:', apiError);
        return NextResponse.json({ message: 'Payment API request failed' }, { status: 200 });
      }
      
      // –ò—â–µ–º booking –ø–æ external_reference (–Ω–∞—à orderId)
      let booking = null;
      if (external_reference) {
        console.log('üîç –ò—â–µ–º booking –ø–æ external_reference:', external_reference);
        booking = await bookingStorage.getBookingByExternalReference(external_reference);
        
        if (booking) {
          console.log('‚úÖ Booking –ù–ê–ô–î–ï–ù:', {
            orderId: booking.orderId,
            email: booking.email,
            name: booking.name,
            service: booking.service
          });
        } else {
          console.error('‚ùå Booking –ù–ï –ù–ê–ô–î–ï–ù –¥–ª—è external_reference:', external_reference);
        }
      } else {
        console.error('‚ùå external_reference –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ webhook –¥–∞–Ω–Ω—ã—Ö');
      }
      
      if (!booking) {
        console.warn('‚ö†Ô∏è  Booking –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º');
        return NextResponse.json({ message: 'Booking not found but webhook accepted' }, { status: 200 });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º EMAIL –ö–õ–ò–ï–ù–¢–£ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
      try {
        await sendBookingEmail(booking.email, booking.name, booking.service, booking.orderId);
        console.log('üìß Email –∫–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã');
      } catch (emailError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∫–ª–∏–µ–Ω—Ç—É:', emailError);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–¢–û–†–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –ø–æ–∫—É–ø–∫–µ  
      try {
        const serviceNames: Record<string, string> = {
          'manicure-gel': 'MANICURE + NIVELAMENTO + ESMALTA√á√ÉO EM GEL',
          'alongamento-gel': 'ALONGAMENTO + MANICURE + ESMALTA√á√ÉO EM GEL',
          'combo-completo': 'COMBO: MANICURE + ESMALTA√á√ÉO EM GEL + PEDICURE + PL√ÅSTICA DOS P√âS'
        };
        const servicePrices: Record<string, string> = {
          'manicure-gel': 'R$ 80', 
          'alongamento-gel': 'R$ 119',
          'combo-completo': 'R$ 160'
        };

        await sendAdminNotification({
          orderId: booking.orderId,
          customerName: booking.name,
          customerEmail: booking.email,
          customerPhone: booking.phone,
          service: serviceNames[booking.service] || booking.service,
          price: servicePrices[booking.service] || 'N/A',
          paymentId: paymentId,
          timestamp: new Date().toISOString(),
          status: 'COMPRA_CONFIRMADA'
        });
        
        console.log('üìß Segunda notifica√ß√£o admin enviada - COMPRA CONFIRMADA');
        
      } catch (adminEmailError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Ç–æ—Ä–æ–π notifica√ß√£o admin:', adminEmailError);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å booking
      await bookingStorage.updateBooking(booking.orderId, {
        paymentStatus: 'approved',
        mercadoPagoData: { paymentId, processedAt: new Date().toISOString() }
      });
    }

    return NextResponse.json({ message: 'Webhook processed successfully' }, { status: 200 });

  } catch (error) {
    console.error('‚ùå MercadoPago webhook error:', error);
    return NextResponse.json(
      { error: 'Webhook processing failed' },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'MercadoPago webhook endpoint',
    status: 'active',
    timestamp: new Date().toISOString()
  });
}
